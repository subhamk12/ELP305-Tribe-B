#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

Adafruit_MPU6050 mpu;

const float dt = 0.01; // time interval in seconds
float acceleration = 0;
float velocity_x = 0;
float velocity_y = 0;
float distance = 0;
float acceleration_x=0;
float acceleration_y=0;
float acceleration_z=0;
float velocity=0;
float motion=0;
unsigned long startTime=0;

int red_led = 14;
int green_led = 27;
int blue_led = 26;
int flickerDelay = 10;  // delay between intensity changes (in milliseconds)

void setup(void) {
  pinMode(red_led, OUTPUT);
  pinMode(green_led, OUTPUT);
  pinMode(blue_led, OUTPUT);
  Serial.begin(115200);
  while (!Serial)
    delay(10); // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");


  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  /*mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }
  */



  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);
}

void led_color(int red_value, int green_value,int blue_value)
{
  analogWrite(red_led,red_value);
  analogWrite(green_led,green_value);
  analogWrite(blue_led,blue_value);
}

void red_color()
{
  digitalWrite(red_led, LOW);
  digitalWrite(green_led, HIGH);
  digitalWrite(blue_led, HIGH);
  delay(1000);
}

void blinking_red_color()
{
  digitalWrite(red_led, LOW);
  digitalWrite(green_led, HIGH);
  digitalWrite(blue_led, HIGH);
  delay(flickerDelay);
  digitalWrite(red_led,HIGH);
  digitalWrite(blue_led,HIGH);
  digitalWrite(green_led,HIGH);
  delay(flickerDelay);
}

void green_color()
{
  digitalWrite(red_led, HIGH);
  digitalWrite(green_led, LOW);
  digitalWrite(blue_led, HIGH);
  delay(1000);
}

void blinking_green_color()
{
  digitalWrite(red_led, HIGH);
  digitalWrite(green_led, LOW);
  digitalWrite(blue_led, HIGH);
  delay(flickerDelay);
  digitalWrite(red_led,HIGH);
  digitalWrite(blue_led,HIGH);
  digitalWrite(green_led,HIGH);
  delay(flickerDelay);
}

void blinking_blue_color()
{
  digitalWrite(red_led, HIGH);
  digitalWrite(green_led, HIGH);
  digitalWrite(blue_led, LOW);
  delay(flickerDelay);
  digitalWrite(red_led,HIGH);
  digitalWrite(blue_led,HIGH);
  digitalWrite(green_led,HIGH);
  delay(flickerDelay);
}

void white_color()
{
  digitalWrite(red_led, LOW);
  digitalWrite(green_led, LOW);
  digitalWrite(blue_led, LOW);
  delay(1000);
}

void loop() {
 sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  
  acceleration_x = a.acceleration.x -0.4; // Assuming motion is along x-axis, adjust accordingly for other axes
  acceleration_y = a.acceleration.y +0.3;
  acceleration_z = a.acceleration.z -0.3;
  acceleration = sqrt(pow(acceleration_x,2)+pow(acceleration_y,2)+pow(acceleration_z,2));
  velocity_x += acceleration_x * dt;
  velocity_y += acceleration_y * dt;
  velocity = sqrt(pow(velocity_x,2)+pow(velocity_y,2));
  distance += velocity * dt;
  if (acceleration<10.2 && millis()-startTime>30000){
    motion=0;
    blinking_red_color();
    // while (motion=0){
    //   if ((millis()-startTime)>5000){
    //     blinking_red_color();
    //   }
    //   else {
    //     blinking_blue_color();
    //   }
    // }
  }
  else if(acceleration<10.2 && millis()-startTime<30000){
    blinking_green_color();
  }
  else {
    motion=1;
    blinking_green_color();
    startTime=millis();
  }

  Serial.print("Starttime: ");
  Serial.print(startTime);
  Serial.print("Acceleration: ");
  Serial.print(acceleration);
  Serial.print("Acceleration_x: ");
  Serial.print(acceleration_x);
  Serial.print("Acceleration_y: ");
  Serial.print(acceleration_y);
  Serial.print("Acceleration_z: ");
  Serial.print(acceleration_z);
  Serial.print(" m/s^2, Velocity: ");
  Serial.print(velocity);
  Serial.print("motion:");
  Serial.print(motion);
  Serial.print(" m/s, Displacement: ");
  Serial.print(distance);
  Serial.println(" meters");
  
  delay(dt * 1000); // delay to maintain constant time interval
}
